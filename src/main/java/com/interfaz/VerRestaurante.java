/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.interfaz;

import com.clases.CarritoCompra;
import com.clases.Catering;
import com.clases.Cliente;
import com.clases.ClienteParticular;
import com.clases.Comida;
import com.clases.MainManager;
import static com.clases.MainManager.showFrame;
import com.clases.Menu;
import com.clases.Restaurante;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.LineBorder;

public class VerRestaurante extends javax.swing.JFrame {

    ArrayList<TemplateComida> listaTemplates = new ArrayList<>();
    ArrayList<TemplateCatering> listaTemplatesCat = new ArrayList<>();
    ArrayList<TemplateCarrito> listaTemplatesCom = new ArrayList<>();
    ArrayList<TemplateCarrito> listaTemplatesMenu = new ArrayList<>();
    ArrayList<TemplateCarrito> listaTemplatesCatCarrito = new ArrayList<>();
    int xMouse, yMouse;
    private Restaurante restaurante;
    private Cliente clienteActual;
    private boolean clienteParticular;
    private ArrayList<Comida> listaComidas;
    private ArrayList<Menu> listaMenus;
    private boolean ofreceCatering;
    private CarritoCompra carrito;

    /**
     * Creates new form verRestaurante
     *
     * @param restauranteActual
     */
    public VerRestaurante(Restaurante restauranteActual) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.restaurante = restauranteActual;
        listaTemplates = new ArrayList<>();
        clienteActual = MainManager.getClienteIniciado();
        if (clienteActual instanceof ClienteParticular) {
            clienteParticular = true;
        } else {

            clienteParticular = false;
        }
        ofreceCatering = restaurante.isOfreceCatering();
        listaComidas = restaurante.getComidas();
        listaMenus = restaurante.getMenus();
        actualizarRestaurante();
        showComidasYMenus();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        jButtonPedir = new javax.swing.JButton();
        header = new javax.swing.JPanel();
        exitpanel = new javax.swing.JPanel();
        txtexit = new javax.swing.JLabel();
        javaeatlogo1 = new javax.swing.JLabel();
        flecha = new javax.swing.JLabel();
        scroll = new javax.swing.JScrollPane();
        panelParent = new javax.swing.JPanel();
        scroll2 = new javax.swing.JScrollPane();
        panel2 = new javax.swing.JPanel();
        jNombre = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jIcon = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtGastosEnvio = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tiempoEnvio = new javax.swing.JLabel();
        txtCalificacion = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);
        setUndecorated(true);
        setResizable(false);

        bg.setBackground(new java.awt.Color(238, 88, 88));
        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonPedir.setBackground(new java.awt.Color(238, 88, 88));
        jButtonPedir.setFont(new java.awt.Font("Roboto Condensed Light", 0, 24)); // NOI18N
        jButtonPedir.setForeground(new java.awt.Color(0, 0, 0));
        jButtonPedir.setText("IR AL PEDIDO");
        jButtonPedir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPedirActionPerformed(evt);
            }
        });
        bg.add(jButtonPedir, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 600, 300, 50));

        header.setBackground(new java.awt.Color(255, 255, 255));
        header.setPreferredSize(new java.awt.Dimension(1250, 60));
        header.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                headerMouseDragged(evt);
            }
        });
        header.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                headerMousePressed(evt);
            }
        });

        exitpanel.setBackground(new java.awt.Color(255, 255, 255));

        txtexit.setBackground(new java.awt.Color(0, 0, 0));
        txtexit.setFont(new java.awt.Font("Roboto Thin", 1, 24)); // NOI18N
        txtexit.setForeground(new java.awt.Color(0, 0, 0));
        txtexit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtexit.setText("X");
        txtexit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        txtexit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtexitMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtexitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtexitMouseExited(evt);
            }
        });

        javax.swing.GroupLayout exitpanelLayout = new javax.swing.GroupLayout(exitpanel);
        exitpanel.setLayout(exitpanelLayout);
        exitpanelLayout.setHorizontalGroup(
            exitpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtexit, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE))
        );
        exitpanelLayout.setVerticalGroup(
            exitpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, exitpanelLayout.createSequentialGroup()
                .addGap(0, 1, Short.MAX_VALUE)
                .addComponent(txtexit, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javaeatlogo1.setFont(new java.awt.Font("Roboto Condensed", 1, 36)); // NOI18N
        javaeatlogo1.setForeground(new java.awt.Color(255, 102, 0));
        javaeatlogo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/otro/javaEatLogo2.png"))); // NOI18N

        flecha.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        flecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/otro/flecha (3).png"))); // NOI18N
        flecha.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        flecha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                flechaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout headerLayout = new javax.swing.GroupLayout(header);
        header.setLayout(headerLayout);
        headerLayout.setHorizontalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flecha, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(javaeatlogo1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1009, Short.MAX_VALUE)
                .addComponent(exitpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        headerLayout.setVerticalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerLayout.createSequentialGroup()
                .addGroup(headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(flecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(javaeatlogo1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bg.add(header, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1260, 60));

        scroll.setBackground(new java.awt.Color(204, 204, 204));
        scroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        panelParent.setBackground(new java.awt.Color(255, 255, 255));
        panelParent.setLayout(new javax.swing.BoxLayout(panelParent, javax.swing.BoxLayout.Y_AXIS));
        scroll.setViewportView(panelParent);

        bg.add(scroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 960, 470));

        scroll2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        panel2.setBackground(new java.awt.Color(255, 153, 102));
        panel2.setLayout(new javax.swing.BoxLayout(panel2, javax.swing.BoxLayout.Y_AXIS));
        scroll2.setViewportView(panel2);

        bg.add(scroll2, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 60, 300, 540));

        jNombre.setFont(new java.awt.Font("Roboto Condensed Light", 0, 48)); // NOI18N
        jNombre.setForeground(new java.awt.Color(0, 0, 0));
        jNombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jNombre.setText("BURGER KING");
        jNombre.setToolTipText("");
        bg.add(jNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 60, 620, 60));

        jButton1.setBackground(new java.awt.Color(255, 153, 102));
        jButton1.setFont(new java.awt.Font("Roboto Condensed Light", 2, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("COMENTAR");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        bg.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 130, 180, 40));

        jPanel1.setBackground(new java.awt.Color(238, 88, 88));
        jPanel1.setMaximumSize(new java.awt.Dimension(372, 142));
        jPanel1.setMinimumSize(new java.awt.Dimension(372, 142));
        jPanel1.setPreferredSize(new java.awt.Dimension(372, 142));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        bg.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 340, 120));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/otro/circulo.png"))); // NOI18N
        bg.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 135, -1, 30));

        txtGastosEnvio.setFont(new java.awt.Font("Roboto Light", 0, 24)); // NOI18N
        txtGastosEnvio.setForeground(new java.awt.Color(51, 51, 51));
        txtGastosEnvio.setText("10€ ");
        bg.add(txtGastosEnvio, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 129, -1, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/otro/circulo.png"))); // NOI18N
        bg.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(615, 135, 30, 30));

        tiempoEnvio.setFont(new java.awt.Font("Roboto Light", 0, 24)); // NOI18N
        tiempoEnvio.setForeground(new java.awt.Color(51, 51, 51));
        tiempoEnvio.setText("99 min");
        bg.add(tiempoEnvio, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 129, -1, 40));

        txtCalificacion.setFont(new java.awt.Font("Roboto Light", 0, 24)); // NOI18N
        txtCalificacion.setForeground(new java.awt.Color(255, 255, 255));
        txtCalificacion.setText("4.9 ");
        bg.add(txtCalificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 129, 50, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(0, 0, 1260, 650);
    }// </editor-fold>//GEN-END:initComponents

    public Restaurante getRestaurante() {
        return restaurante;
    }

    public void actualizarRestaurante() {
        String path = restaurante.getNombreFotografia();
        ImageIcon imagen = Restaurante.resizedIcon(jIcon.getBounds().width, jIcon.getBounds().height, path);
        jIcon.setIcon(imagen);
        jNombre.setText(restaurante.getNombre());
        if (restaurante.getCalificacionMedia() <= 1.5) {
            txtCalificacion.setForeground(Color.red);
        } else if (restaurante.getCalificacionMedia() <= 3.0) {
            txtCalificacion.setForeground(Color.orange);
        } else {
            txtCalificacion.setForeground(Color.green);
        }
        txtCalificacion.setText(restaurante.getCalificacionMedia() + "");
        txtGastosEnvio.setText(restaurante.getGastosEnvio() + "€");
        tiempoEnvio.setText(restaurante.getTiempoEnvio() + " min");
    }

    public void actualizarPanel() {
        panel2.removeAll();
        panel2.revalidate();
        panel2.repaint();
        listaTemplatesCom.clear();
        listaTemplatesMenu.clear();
        listaTemplatesCatCarrito.clear();
    }

    public void actualizarListaCarrito(CarritoCompra carrito) {

        actualizarPanel();
        this.carrito = carrito;
        generarPanelesCarrito();
        rellenarPanelesCarrito();
    }

    private void insertarTitulo(String nombre) {
        JPanel panelTitulo = new JPanel();
        panelTitulo.setPreferredSize(new Dimension(930, 50));
        JLabel tituloComida = new JLabel(nombre);
        tituloComida.setFont(new Font("Roboto Condensed Light", Font.PLAIN, 30));
        tituloComida.setForeground(Color.black);
        tituloComida.setHorizontalAlignment(SwingConstants.CENTER);
//        tituloComida.setBorder(new LineBorder(Color.red));
//        panelTitulo.setBorder(new LineBorder(Color.blue));
        panelTitulo.setBackground(new Color(255, 153, 102));
        panelTitulo.add(tituloComida);
        panelParent.add(panelTitulo);
    }

    private void showComidasYMenus() {
        //System.out.println(listaComidas.size());
        // Comidas
        listaTemplates = new ArrayList<>();
        insertarTitulo("Comidas");
        generarPaneles(listaComidas.size());
        rellenarPanelesComida(listaComidas);
        // Menus
        if (!listaMenus.isEmpty()) {
            insertarTitulo("Menus");
            listaTemplates = new ArrayList<>();
            generarPaneles(listaMenus.size());
            rellenarPanelesMenu(listaMenus);
        }

        //Catering (Si es empresa)
        if (!clienteParticular && ofreceCatering) {
            insertarTitulo("Catering");
            ArrayList<String> listaCatering = new ArrayList<>();
            Catering cat = restaurante.getCatering();
            if (cat.isCamareros()) {
                listaCatering.add("Camareros");
            }
            if (cat.isCocineros()) {
                listaCatering.add("Cocineros");
            }
            if (cat.isDecoracion()) {
                listaCatering.add("Decoración");
            }
            if (cat.isEspacioPrivado()) {
                listaCatering.add("Espacio");
            }
            if (!(cat.getComidaAProporcionar().equals(" "))) {
                listaCatering.add("Comida");
            }
            generarPanelesCatering(listaCatering.size());
            rellenarPanelesCatering(listaCatering);
        }

        new java.util.Timer().schedule(
                new java.util.TimerTask() {
            @Override
            public void run() {
                scroll.getVerticalScrollBar().setValue(0);
                scroll2.getVerticalScrollBar().setValue(0);
            }
        }, 200);
    }

    private void txtexitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtexitMouseClicked
        MainManager.quit();
    }//GEN-LAST:event_txtexitMouseClicked

    private void txtexitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtexitMouseEntered
        txtexit.setForeground(Color.white);
    }//GEN-LAST:event_txtexitMouseEntered

    private void txtexitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtexitMouseExited
        txtexit.setForeground(Color.black);
    }//GEN-LAST:event_txtexitMouseExited

    private void headerMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();

        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_headerMouseDragged

    private void headerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_headerMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_headerMousePressed

    private void flechaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flechaMouseClicked
        MainManager.limpiarCarrito();
        showFrame("MenuPrincipal");
    }//GEN-LAST:event_flechaMouseClicked

    private void jButtonPedirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPedirActionPerformed
        this.setVisible(false);
        Comprar comprar = new Comprar(restaurante,this);
        comprar.setVisible(true);
    }//GEN-LAST:event_jButtonPedirActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        Opiniones comentar = new Opiniones(this);
        comentar.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    public void generarPaneles(int num) {
        System.out.println("Generando...");
        int resto = num % 3;
        int numeroPaneles;
        if (resto == 0) {
            numeroPaneles = num / 3;
        } else {
            numeroPaneles = (int) num / 3 + 1;
        }
        for (int i = 0; i < numeroPaneles; i++) {
            TemplatePanelsCuatro panel = new TemplatePanelsCuatro();
            int n = 3;
            if (i == numeroPaneles - 1 && resto != 0) {
                n = resto;
            }
            for (int j = 0; j < n; j++) {
                TemplateComida template = new TemplateComida(this);
                panel.add(template);
                listaTemplates.add(template);
            }
//            panel.setBorder(new LineBorder(Color.red));
            panelParent.add(panel);
        }
        System.out.println("Terminado");
        panelParent.revalidate();
        panelParent.repaint();
        scroll.repaint();
    }

    public void generarPanelesCarrito() {
//        int numComidas = carrito.getComidas().size();
//        int numMenus = carrito.getMenus().size();
        //int numTotal = numComidas + numMenus /* + numCatering o algo así */;
        for (Comida comida : carrito.getComidas()) {
            TemplateCarrito template = new TemplateCarrito();
            listaTemplatesCom.add(template);
            panel2.add(template);
        }
        for (Menu menu : carrito.getMenus()) {
            TemplateCarrito template = new TemplateCarrito();
            listaTemplatesMenu.add(template);
            panel2.add(template);
        }
        for (String servicio : carrito.getCatering()) {
            TemplateCarrito template = new TemplateCarrito();
            listaTemplatesCatCarrito.add(template);
            panel2.add(template);
        }

        panel2.revalidate();
        panel2.repaint();
        scroll2.repaint();
    }

    public void rellenarPanelesCarrito() {
        int i = 0;
        System.out.println(listaTemplatesCom.size());
        for (TemplateCarrito template : listaTemplatesCom) {
            Comida comida = carrito.getComidas().get(i);
            template.setTitulo(comida.getTitulo());
            template.setPrecio(comida.getPrecioVenta() * comida.getCantidad());
            template.setCantidad(comida.getCantidad());
            //template.setBorder(new LineBorder(Color.blue)); //Pintamos de azul para ver lo limites
            i++;
        }
        System.out.println(carrito.getMenus().size());
        int j = 0;
        for (TemplateCarrito template : listaTemplatesMenu) {
            Menu menu = carrito.getMenus().get(j);
            template.setTitulo(menu.getNombre());
            template.setPrecio(menu.getPrecio() * menu.getCantidad());
            template.setCantidad(menu.getCantidad());
            //template.setBorder(new LineBorder(Color.blue)); //Pintamos de azul para ver lo limites
            j++;
        }
        //zona del catering i guess
        int z = 0;
        Catering cat = restaurante.getCatering();
        for (TemplateCarrito template : listaTemplatesCatCarrito) {
            String nombre = carrito.getCatering().get(z);
            template.setServicio(nombre);
            template.setPrecio(cat.getPrecioServicios(nombre));
            template.setCantidad(1);
            z++;
        }
        System.out.println("Terminado");
    }

    public void generarPanelesCatering(int num) {
        System.out.println("Generando...");
        int resto = num % 3;
        int numeroPaneles;
        if (resto == 0) {
            numeroPaneles = num / 3;
        } else {
            numeroPaneles = (int) num / 3 + 1;
        }
        for (int i = 0; i < numeroPaneles; i++) {
            TemplatePanelsCuatro panel = new TemplatePanelsCuatro();
            int n = 3;
            if (i == numeroPaneles - 1 && resto != 0) {
                n = resto;
            }
            for (int j = 0; j < n; j++) {
                TemplateCatering templateCat = new TemplateCatering(this);
                panel.add(templateCat);
                listaTemplatesCat.add(templateCat);
            }
//            panel.setBorder(new LineBorder(Color.red));
            panelParent.add(panel);
        }
        System.out.println("Terminado");
        panelParent.revalidate();
        panelParent.repaint();
        scroll.repaint();
    }

    public void rellenarPanelesComida(ArrayList<Comida> listaComidas) {
        int i = 0;
        for (TemplateComida template : listaTemplates) {
            Comida comida = listaComidas.get(i);
            template.setComida(comida);
            template.setTitulo(comida.getTitulo());
            template.setPrecio(comida.getPrecioVenta());
            template.setIngredientes(comida.getIngredientes());
            //String path = "src/main/resources/otro/COMIDA" + comida.getId() + ".jpg";
            template.setImageFromPath(comida.getNombreFotografia());
            //template.setBorder(new LineBorder(Color.blue)); //Pintamos de azul para ver lo limites
            i++;
        }
        System.out.println("Terminado");
    }

    public void rellenarPanelesMenu(ArrayList<Menu> listaMenus) {
        int i = 0;
        for (TemplateComida template : listaTemplates) {
            Menu menu = listaMenus.get(i);
            template.setMenu(menu);
            template.setTitulo(menu.getNombre());
            template.setPrecio(menu.getPrecio());
            template.setTituloIngrediente("Comidas incluidas:");
            String comidasIncluidas = "";
            for (Comida comidas : menu.getComidas()) {
                comidasIncluidas += comidas.getTitulo() + "; ";
            }
            template.setIngredientes(comidasIncluidas);
            template.setImageFromPath(menu.getNombreFotografia());
            i++;
        }
    }

    public void rellenarPanelesCatering(ArrayList<String> listaCatering) {
        int i = 0;
        Catering cat = restaurante.getCatering();
        for (TemplateCatering template : listaTemplatesCat) {
            String nombre = listaCatering.get(i);
            template.setTitulo("Servicio " + nombre);
            template.setServicio(nombre);
            switch (nombre) {
                case "Cocineros" ->
                    template.setPrecio(cat.getPrecioCocineros());
                case "Camareros" ->
                    template.setPrecio(cat.getPrecioCamareros());
                case "Espacio" ->
                    template.setPrecio(cat.getPrecioEspacio());
                case "Decoración" ->
                    template.setPrecio(cat.getPrecioDecoracion());
                case "Comida" -> {
                    template.setPrecio(restaurante.getCatering().getPrecioComida()); //Debería ser el precio de todas las comidas en total
                    template.setComida(restaurante.getCatering().getComidaAProporcionar()); //Debería ser un ArrayList de comidas.
                }
            }
            String path = "src/main/resources/otro/" + nombre + ".jpg";
            template.setImageFromPath(path);
            i++;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerRestaurante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerRestaurante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerRestaurante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerRestaurante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // new VerRestaurante().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JPanel exitpanel;
    private javax.swing.JLabel flecha;
    private javax.swing.JPanel header;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonPedir;
    private javax.swing.JLabel jIcon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jNombre;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel javaeatlogo1;
    private javax.swing.JPanel panel2;
    private javax.swing.JPanel panelParent;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JScrollPane scroll2;
    private javax.swing.JLabel tiempoEnvio;
    private javax.swing.JLabel txtCalificacion;
    private javax.swing.JLabel txtGastosEnvio;
    private javax.swing.JLabel txtexit;
    // End of variables declaration//GEN-END:variables
}
